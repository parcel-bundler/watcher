// @flow
declare type FilePath = string;

export type BackendType =
  | 'fs-events'
  | 'watchman'
  | 'inotify'
  | 'windows'
  | 'brute-force';
export type EventType = 'create' | 'update' | 'delete' | 'rename';
export type DocumentKind = 'directory' | 'file' | 'unknown';
export interface Options {
  ignore?: Array<FilePath>,
  backend?: BackendType
}
export type SubscribeCallback = (
  err: ?Error,
  events: Array<Event>
) => mixed;
export interface AsyncSubscription {
  unsubscribe(): Promise<void>
}
export interface Event {
  path: FilePath,
  type: EventType,
  kind: DocumentKind,
  ino: string,
  oldPath?: string,
  fileId?: string,
}
declare module.exports: {
  getEventsSince(
    dir: FilePath,
    snapshot: FilePath,
    opts?: Options
  ): Promise<Array<Event>>,
  subscribe(
    dir: FilePath,
    fn: SubscribeCallback,
    opts?: Options
  ): Promise<AsyncSubscription>,
  unsubscribe(
    dir: FilePath,
    fn: SubscribeCallback,
    opts?: Options
  ): Promise<void>,
  scan(
    dir: FilePath,
    opts?: Options
  ): Promise<Array<Event>>,
  writeSnapshot(
    dir: FilePath,
    snapshot: FilePath,
    opts?: Options
  ): Promise<FilePath>
}
